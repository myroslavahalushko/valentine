[{"C:\\MyGovnoCod\\valentine\\src\\index.js":"1","C:\\MyGovnoCod\\valentine\\src\\reportWebVitals.js":"2","C:\\MyGovnoCod\\valentine\\src\\App.js":"3"},{"size":500,"mtime":1613073846000,"results":"4","hashOfConfig":"5"},{"size":362,"mtime":1613073846000,"results":"6","hashOfConfig":"5"},{"size":3963,"mtime":1613302548245,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1r2lqtz",{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"12","messages":"13","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},"C:\\MyGovnoCod\\valentine\\src\\index.js",[],"C:\\MyGovnoCod\\valentine\\src\\reportWebVitals.js",[],"C:\\MyGovnoCod\\valentine\\src\\App.js",["15","16","17"],"import logo from './hearts/heart.svg';\nimport './App.css';\nimport {useState, useEffect, useCallback} from \"react\";\nimport song1 from './song.m4a';\nimport song2 from './song2.mp3';\nimport useSound from 'use-sound';\nimport heart1 from './hearts/heart1.png';\nimport heart2 from './hearts/heart2.png';\nimport heart3 from './hearts/heart3.png';\nimport heart4 from './hearts/heart4.png';\nimport heart5 from './hearts/heart5.png';\nimport heart6 from './hearts/heart6.png';\nimport heart7 from './hearts/heart7.png';\nimport heart8 from './hearts/heart8.png';\n\nlet gameLevels = {\n   1: {\n       score: 0,\n       img: heart1\n   },\n    2: {\n       score: 60,\n        img: heart2\n    },\n    3: {\n        score: 120,\n        img: heart3\n    },\n    4: {\n        score: 228,\n        img: heart4\n    },\n    5: {\n        score: 322,\n        img: heart5\n    },\n    6: {\n        score: 470,\n        img: heart6\n    },\n    7: {\n        score: 520,\n        img: heart7\n    },\n    8: {\n        score: 666,\n        img: heart8\n    },\n\n}\n\nconst Hearts = ({x, y, level}) => {\n    const [littleHearts, setLittleHearts] = useState([]);\n    const [image, setImage] = useState(gameLevels[1].img);\n    const createArray = () => {\n        let rand = Math.floor(Math.random()*3+1);\n        let array = [];\n        for(let i = 0; i < rand; i++) {\n            array.push(\n                {\n                    top: Math.floor(Math.random()*12-12)*10,\n                    left: Math.floor(Math.random()*12-12)*10,\n                }\n            );\n        }\n        return array\n    }\n    useEffect(() => {\n        setImage(gameLevels[level].img)\n        setLittleHearts(createArray());\n\n    }, []);\n    return (\n        <>\n            {littleHearts.map((h) =>  <img\n                           src={image} alt=\"logo\"\n                           className={`littleHearts littleHeartsAnimate`}\n                           style={{top: y+h.top, left: x+h.left}}\n                    />\n            )}\n        </>\n)\n}\n\nfunction App() {\n    const [heartBeat, setHeartBeat] = useState(false);\n    const [score, setScore] = useState(0);\n    const [level, setLevel] = useState(1);\n    const [littleHearts, setLittleHearts] = useState([]);\n    const [darkMode, setDarkMode] = useState(false);\n    const [songUrl, setSongUrl] = useState(song2);\n    const [win, setWin] = useState(false);\n\n    const [play, { pause }] = useSound(songUrl);\n    \n    const onClickHeart = () => {\n        setHeartBeat(!heartBeat);\n        !heartBeat ? play() : pause();\n    }\n\n    const addHearts = useCallback((e) => {\n        e.preventDefault();\n        if (((e.screenX < (190) && e.screenY < (105)))) return\n\n        setLittleHearts((prev) => {\n            return [...prev, {\n                x: e.screenX,\n                y: e.screenY,\n\n            }]\n        });\n        setScore((score) => score+1);\n        if(score < 666) {\n            if(score == gameLevels[level+1].score) {\n                setLevel(level+1);\n            }\n        } else {\n            if(!win) {\n                let result = prompt(\"Ошибка! Успех!\", [\"PS: ***\"]);\n                setWin(true);\n                setLevel(level+1);\n                if(result === \"муп\") {\n                    setHeartBeat(false);\n                    pause();\n                    setSongUrl(song1);\n                } else {\n                    alert(\"Гррр\");\n                }\n            }\n        }\n\n    }, [littleHearts])\n\n    return (\n        <div className={darkMode ? \"AppDark\" : \"AppLight\"} onClick={addHearts}>\n            <div className=\"score\" onClick={() => setDarkMode(!darkMode)}>Score: {score}</div>\n            <div className={ heartBeat ? \"heartBlock heartAnimate\" : \"heartBlock\"}\n                 onClick={onClickHeart}\n            >\n                <img src={logo} className=\"heart\" alt=\"logo\" />\n            </div>\n            {littleHearts.map(h => <Hearts x={h.x} y={h.y} level={level}  />)}\n        </div>\n    );\n}\n\n\n\nexport default App;\n\n",{"ruleId":"18","severity":1,"message":"19","line":72,"column":8,"nodeType":"20","endLine":72,"endColumn":10,"suggestions":"21"},{"ruleId":"22","severity":1,"message":"23","line":114,"column":22,"nodeType":"24","messageId":"25","endLine":114,"endColumn":24},{"ruleId":"18","severity":1,"message":"26","line":132,"column":8,"nodeType":"20","endLine":132,"endColumn":22,"suggestions":"27"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'level'. Either include it or remove the dependency array. If 'setImage' needs the current value of 'level', you can also switch to useReducer instead of useState and read 'level' in the reducer.","ArrayExpression",["28"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useCallback has missing dependencies: 'level', 'pause', 'score', and 'win'. Either include them or remove the dependency array. You can also do a functional update 'setLevel(l => ...)' if you only need 'level' in the 'setLevel' call.",["29"],{"desc":"30","fix":"31"},{"desc":"32","fix":"33"},"Update the dependencies array to be: [level]",{"range":"34","text":"35"},"Update the dependencies array to be: [level, pause, score, win]",{"range":"36","text":"37"},[1658,1660],"[level]",[3393,3407],"[level, pause, score, win]"]